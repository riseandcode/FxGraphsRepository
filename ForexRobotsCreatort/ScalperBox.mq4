/*
   Generated by EX4 TO MQ4 decompile Service 
   Website: http://www.ex4Tomq4.net 
   E-mail : info@ex4Tomq4.net 
*/
#property copyright "Copyright 2012, http://www.4rexbox.com"
#property link      "http://www.4rexbox.com"

#import "wininet.dll"
   int InternetOpenA(string a0, int a1, string a2, string a3, int a4);
   int InternetOpenUrlA(int a0, string a1, string a2, int a3, int a4, int a5);
   int InternetReadFile(int a0, string a1, int a2, int& a3[]);
   int InternetCloseHandle(int a0);
#import "WALLSTREET.dll"
   int SessionInit(int a0, int a1, int a2, int a3, string a4);
   int SessionDeinit(int a0, int a1, int a2, int a3, string a4);
   int ParamValue(int a0, int a1);
   bool CheckCloseLong(int a0, double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9);
   bool CheckCloseShort(int a0, double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9);
   bool CheckOpenLong(int a0, double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8);
   bool CheckOpenShort(int a0, double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8);
#import

extern int Magic = 4698523;
string EA_Comment = "";
double MaxSpread = 3.5;
int Slippage = 2;
int gi_100 = 3;
int gi_104 = 3;
bool StealthMode = FALSE;
bool gi_112 = TRUE;
 bool CloseOnlyOnProfit = FALSE;
 bool NFA = FALSE;
 bool No_Hedge = FALSE;
string CS = "==== Custom Settings ====";
int StopLoss = 0;
int TakeProfit = 0;
 int SecureProfit = 0;
 int SecureProfitTriger = 0;
 bool UseCustomPair = FALSE;
 string UseSettingsFrom = "EURUSD";
 string MM = "==== Risk Management ====";
 bool RecoveryMode = FALSE;
extern double FixedLots = 0.1;
 double AutoMM = 0.0;
 double AutoMM_Max = 20.0;
 int MaxAccountTrades = 0;
 string FE = "==== Monday-Friday Rules ====";
 int MondayStartHour = 0;
 bool FridayExit = FALSE;
 int LastTradeHour = 19;
 int ExitHour = 20;
string NF = "==== News Filter Settings ====";
bool Avoid_News = FALSE;
int GMT_Offset = 2;
bool DST_Usage = TRUE;
bool Include_Medium_News = TRUE;
int Wait_Before_News = 240;
int Wait_After_News = 240;
int gi_260 = 50;
double gd_264 = 25.0;
double gd_272 = 1.1;
int gi_280 = 0;
int gi_284 = 0;
int gi_288 = 0;
int gi_292 = 0;
int gi_296 = 0;
int gi_300 = 0;
int gi_304 = 0;
int gi_308 = 0;
int gi_312 = 0;
int gi_316 = 0;
int gi_320 = 0;
int gi_324 = 0;
int gi_328 = 0;
int gi_332 = 0;
int gi_336 = 0;
int gi_340 = 0;
int gi_344 = 0;
int gi_348 = 0;
int gi_352 = -1;
string gs_356 = "";
bool gi_364 = TRUE;
bool gi_368 = FALSE;
int gi_372 = 0;
double gd_376 = 0.01;
double gd_384 = 0.01;
double gd_392 = 0.01;
int gi_400 = 100000;
double gd_404 = 1000.0;
double gd_412 = 0.0001;
double gd_420 = 0.1;
string gs_428 = "";
string gs_436 = "";
int gi_444 = 0;
int gi_448 = 0;
double gd_452 = 1.0;
int gi_460 = 0;
int gia_464[1000];
string gsa_468[1000];
string gsa_472[1000];

int f0_0() {
   int li_20;
   bool li_0 = TRUE;
   string ls_4 = "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; Q312461)";
   bool li_12 = FALSE;
   int li_16 = InternetOpenA(ls_4, li_12, "0", "0", 0);
   if (li_16 != 0) {
      li_20 = InternetOpenUrlA(li_16, "http://www.wallstreet-forex.com", "0", 0, -2080374528, 0);
      if (li_20 == 0) li_0 = FALSE;
      else InternetCloseHandle(li_20);
      InternetCloseHandle(li_16);
   } else li_0 = FALSE;
   return (li_0);
}

void init() {
   gi_364 = TRUE;
   gi_352 = -1;
   Comment("");
   if (ObjectFind("BKGR") >= 0) ObjectDelete("BKGR");
   if (ObjectFind("BKGR2") >= 0) ObjectDelete("BKGR2");
   if (ObjectFind("BKGR3") >= 0) ObjectDelete("BKGR3");
   if (ObjectFind("BKGR4") >= 0) ObjectDelete("BKGR4");
   if (ObjectFind("LV") >= 0) ObjectDelete("LV");
}

int deinit() {
   Comment("");
   if (ObjectFind("BKGR") >= 0) ObjectDelete("BKGR");
   if (ObjectFind("BKGR2") >= 0) ObjectDelete("BKGR2");
   if (ObjectFind("BKGR3") >= 0) ObjectDelete("BKGR3");
   if (ObjectFind("BKGR4") >= 0) ObjectDelete("BKGR4");
   if (ObjectFind("LV") >= 0) ObjectDelete("LV");
   if (gi_352 != -1) gi_352 = f0_7();
   return (0);
}

int start() {
   if(AccountNumber() != thisShouldBeAccountNumber  && !IsDemo())
	{
		Alert("Plase take note, your account is not activated. Details here: http://www.4rexbox.com");
	}
	else
	{
		   double ld_8;
		   double ld_16;
		   double ld_24;
		   color li_32;
		   double ld_40;
		   int li_80;
		   int li_84;
		   int li_92;
		   string ls_96;
		   int li_172;
		   double ld_184;
		   double ld_192;
		   string ls_208;
		   string ls_0 = "";
		   double ld_48 = 0;
		   double ld_56 = 0;
		   double ld_64 = 0;
		   double ld_72 = 1;
		   if (DayOfWeek() == 1 && iVolume(NULL, PERIOD_D1, 0) < 5.0) return (0);
		   if (StringLen(Symbol()) < 6) return (0);
		   if (gi_364) {
			  Comment("\nInitializing ...");
			  Sleep(1000);
			  RefreshRates();
			  gi_364 = FALSE;
			  gs_428 = "";
			  gs_436 = "";
			  gi_444 = 0;
			  gi_372 = MarketInfo(Symbol(), MODE_STOPLEVEL);
			  gd_376 = MarketInfo(Symbol(), MODE_MINLOT);
			  gd_384 = MarketInfo(Symbol(), MODE_MAXLOT);
			  gi_400 = MarketInfo(Symbol(), MODE_LOTSIZE);
			  gd_392 = MarketInfo(Symbol(), MODE_LOTSTEP);
			  gd_404 = MarketInfo(Symbol(), MODE_MARGINREQUIRED);
			  if (Digits <= 3) gd_412 = 0.01;
			  else gd_412 = 0.0001;
			  if (Digits == 3 || Digits == 5) gd_420 = 0.1;
			  else gd_420 = 1;
			  Sleep(1000);
			  gi_368 = f0_0();
			  Sleep(1000);
			  if (!gi_368) gi_364 = TRUE;
		   }
		   if ((!IsTesting()) && IsStopped()) return (0);
		   if ((!IsTesting()) && !IsTradeAllowed()) return (0);
		   if ((!IsTesting()) && IsTradeContextBusy()) return (0);
		   if (IsDllsAllowed() == FALSE) {
			  Comment("\nWarning: Set Parameter **AllowDLL Imports** ON in menu Tools -> Options -> ExpertAdvisors.");
			  Print("Warning: Set Parameter **AllowDLL Imports** ON in menu Tools -> Options -> ExpertAdvisors.");
			  Alert("Warning: Set Parameter **AllowDLL Imports** ON in menu Tools -> Options -> ExpertAdvisors.");
			  Sleep(30000);
			  return (0);
		   }
		   if (gi_352 <= 0) {
			  if (!gi_368) {
				 Comment("\nInternet connection problem");
				 Alert("Internet connection problem");
				 Sleep(10000);
				 return (0);
			  }
			  Comment("\nUpdating settings. Please, wait! ...");
			  Sleep(1000);
			  ls_96 = "";
			  li_80 = 1440 * TimeHour(TimeLocal()) + 60 * TimeMinute(TimeLocal()) + TimeSeconds(TimeLocal()) + MathMod(AccountNumber(), 10000);
			  for (int li_88 = 0; li_88 < StringLen(Symbol()); li_88++) {
				 li_92 = StringGetChar(Symbol(), li_88);
				 li_80 += li_92;
			  }
			  MathSrand(li_80);
			  li_84 = MathMod(MathRand(), 60);
			  for (int li_104 = 1; li_104 <= li_84 + 1; li_104++) {
				 if (li_104 > 2) ls_96 = ls_96 + ".";
				 Comment("\nUpdating settings. Please, wait! ..." + ls_96);
				 Sleep(1000);
			  }
			  gi_352 = f0_5();
			  Sleep(1000);
			  if (gi_352 < 0) Comment("\nInitializing ...");
		   }
		   if (gi_352 <= 0) {
			  if (gi_352 == -8) {
				 Comment("\nUnsupported currency pair " + gs_356 + ", Bid: " + DoubleToStr(Bid, Digits) + ", Ask: " + DoubleToStr(Ask, Digits));
				 Alert("Unsupported currency pair " + gs_356 + ", Bid: " + DoubleToStr(Bid, Digits) + ", Ask: " + DoubleToStr(Ask, Digits));
			  } else {
				 Comment("\nInitialization is failed with error code " + DoubleToStr(gi_352, 0));
				 Alert("Initialization is failed with error code " + DoubleToStr(gi_352, 0));
			  }
			  Sleep(10000);
			  return (0);
		   }
		   if (gi_280 <= 0 || gi_308 <= 0 || gi_332 <= 0 || gi_340 <= 0) {
			  Comment("\nWrong initialization parameters for pair " + Symbol());
			  Alert("Wrong initialization parameters for pair " + Symbol());
			  Sleep(10000);
			  return (0);
		   }
		   HideTestIndicators(TRUE);
		   double ld_108 = iClose(NULL, PERIOD_M15, 1);
		   double ld_116 = iMA(NULL, PERIOD_M15, gi_280, 0, MODE_SMMA, PRICE_CLOSE, 1);
		   double ld_124 = iWPR(NULL, PERIOD_M15, gi_308, 1);
		   double ld_132 = iATR(NULL, PERIOD_M15, gi_332, 1);
		   double ld_140 = iCCI(NULL, PERIOD_M15, gi_340, PRICE_TYPICAL, 1);
		   HideTestIndicators(FALSE);
		   double ld_148 = 0;
		   if (StringSubstr(AccountCurrency(), 0, 3) == "JPY") {
			  ld_148 = MarketInfo("USDJPY" + StringSubstr(Symbol(), 6), MODE_BID);
			  if (ld_148 > 0.1) ld_72 = ld_148;
			  else ld_72 = 84;
		   }
		   if (StringSubstr(AccountCurrency(), 0, 3) == "GBP") {
			  ld_148 = MarketInfo("GBPUSD" + StringSubstr(Symbol(), 6), MODE_BID);
			  if (ld_148 > 0.1) ld_72 = 1 / ld_148;
			  else ld_72 = 0.6211180124;
		   }
		   if (StringSubstr(AccountCurrency(), 0, 3) == "EUR") {
			  ld_148 = MarketInfo("EURUSD" + StringSubstr(Symbol(), 6), MODE_BID);
			  if (ld_148 > 0.1) ld_72 = 1 / ld_148;
			  else ld_72 = 0.7042253521;
		   }
		   if (AutoMM > 0.0 && (!RecoveryMode)) ld_40 = MathMax(gd_376, MathMin(gd_384, MathCeil(MathMin(AutoMM_Max, AutoMM) / ld_72 / 100.0 * AccountFreeMargin() / gd_392 / (gi_400 / 100)) * gd_392));
		   if (AutoMM > 0.0 && RecoveryMode) ld_40 = f0_1();
		   if (AutoMM == 0.0) ld_40 = FixedLots;
		   ls_0 = ls_0 
			  + "\n  " 
			  + "\n " 
			  + "\n  Authorization - OK!" 
			  + "\n -----------------------------------------------" 
			  + "\n  SL = " + StopLoss + " pips / TP = " + TakeProfit + " pips" 
		   + "\n  Spread = " + DoubleToStr((Ask - Bid) / gd_412, 1) + " pips";
		   if (Ask - Bid > MaxSpread * gd_412) ls_0 = ls_0 + " - TOO HIGH";
		   else ls_0 = ls_0 + " - NORMAL";
		   ls_0 = ls_0 
		   + "\n -----------------------------------------------";
		   if (AutoMM > 0.0) {
			  ls_0 = ls_0 
				 + "\n  AutoMM - ENABLED" 
			  + "\n  Risk = " + DoubleToStr(AutoMM, 1) + "%";
		   }
		   ls_0 = ls_0 
		   + "\n  Trading Lots = " + DoubleToStr(ld_40, 2);
		   ls_0 = ls_0 
		   + "\n -----------------------------------------------";
		   if (RecoveryMode) {
			  ls_0 = ls_0 
			  + "\n  Recovery Mode - ENABLED";
		   } else {
			  ls_0 = ls_0 
			  + "\n  Recovery Mode - DISABLED";
		   }
		   if (StealthMode) {
			  ls_0 = ls_0 
			  + "\n  Stealth Mode - ENABLED";
		   } else {
			  ls_0 = ls_0 
			  + "\n  Stealth Mode - DISABLED";
		   }
		   f0_2();
		   ls_0 = ls_0 
		   + "\n  " + gs_428;
		   ls_0 = ls_0 
		   + "\n -----------------------------------------------";
		   ls_0 = "";
		   Comment(ls_0);
		   if (ObjectFind("BKGR") < 0) {
			  // ObjectCreate("BKGR", OBJ_LABEL, 0, 0, 0);
			  // ObjectSetText("BKGR", "g", 110, "Webdings", LightSlateGray);
			  // ObjectSet("BKGR", OBJPROP_CORNER, 0);
			  // ObjectSet("BKGR", OBJPROP_BACK, TRUE);
			  // ObjectSet("BKGR", OBJPROP_XDISTANCE, 5);
			  // ObjectSet("BKGR", OBJPROP_YDISTANCE, 15);
		   }
		   if (ObjectFind("BKGR2") < 0) {
			  // ObjectCreate("BKGR2", OBJ_LABEL, 0, 0, 0);
			  // ObjectSetText("BKGR2", "g", 110, "Webdings", DimGray);
			  // ObjectSet("BKGR2", OBJPROP_BACK, TRUE);
			  // ObjectSet("BKGR2", OBJPROP_XDISTANCE, 5);
			  // ObjectSet("BKGR2", OBJPROP_YDISTANCE, 60);
		   }
		   if (ObjectFind("BKGR3") < 0) {
			  // ObjectCreate("BKGR3", OBJ_LABEL, 0, 0, 0);
			  // ObjectSetText("BKGR3", "g", 110, "Webdings", DimGray);
			  // ObjectSet("BKGR3", OBJPROP_CORNER, 0);
			  // ObjectSet("BKGR3", OBJPROP_BACK, TRUE);
			  // ObjectSet("BKGR3", OBJPROP_XDISTANCE, 5);
			  // ObjectSet("BKGR3", OBJPROP_YDISTANCE, 45);
		   }
		   if (ObjectFind("LV") < 0) {
			  // ObjectCreate("LV", OBJ_LABEL, 0, 0, 0);
			  // ObjectSetText("LV", "WALL STREET ROBOT", 9, "Tahoma Bold", DarkOrange);
			  // ObjectSet("LV", OBJPROP_CORNER, 0);
			  // ObjectSet("LV", OBJPROP_BACK, FALSE);
			  // ObjectSet("LV", OBJPROP_XDISTANCE, 13);
			  // ObjectSet("LV", OBJPROP_YDISTANCE, 23);
		   }
		   if (ObjectFind("BKGR4") < 0) {
			  // ObjectCreate("BKGR4", OBJ_LABEL, 0, 0, 0);
			  // ObjectSetText("BKGR4", "g", 110, "Webdings", DimGray);
			  // ObjectSet("BKGR4", OBJPROP_CORNER, 0);
			  // ObjectSet("BKGR4", OBJPROP_BACK, TRUE);
			  // ObjectSet("BKGR4", OBJPROP_XDISTANCE, 5);
			  // ObjectSet("BKGR4", OBJPROP_YDISTANCE, 96);
		   }
		   if (TakeProfit < gi_372 * Point / gd_412) TakeProfit = gi_372 * Point / gd_412;
		   if (StopLoss < gi_372 * Point / gd_412) StopLoss = gi_372 * Point / gd_412;
		   Slippage = Slippage * gd_412;
		   int li_156 = 0;
		   int li_160 = 0;
		   int li_164 = 0;
		   int li_168 = 0;
		   if (CloseOnlyOnProfit) gi_304 = FALSE;
		   for (int li_180 = OrdersTotal() - 1; li_180 >= 0; li_180--) {
			  if (!OrderSelect(li_180, SELECT_BY_POS, MODE_TRADES)) Print("Error in OrderSelect! Position:", li_180);
			  else {
				 if (OrderType() <= OP_SELL && OrderSymbol() == Symbol()) {
					if (OrderMagicNumber() != Magic) {
					   if (OrderType() == OP_BUY) li_164++;
					   else li_168++;
					}
					if (OrderMagicNumber() == Magic) {
					   ld_64 += OrderProfit();
					   if (OrderType() == OP_BUY) ld_48 = (Bid - OrderOpenPrice()) / gd_412;
					   else ld_48 = (OrderOpenPrice() - Ask) / gd_412;
					   ld_56 += ld_48;
					   if (OrderType() == OP_BUY) {
						  li_156++;
						  if (OrderStopLoss() == 0.0 && StealthMode == FALSE) {
							 ld_184 = NormalizeDouble(OrderOpenPrice() - StopLoss * gd_412, Digits);
							 ld_192 = NormalizeDouble(OrderOpenPrice() + TakeProfit * gd_412, Digits);
							 OrderModify(OrderTicket(), OrderOpenPrice(), ld_184, ld_192, 0, Green);
							 continue;
						  }
						  if (Bid >= OrderOpenPrice() + TakeProfit * gd_412 || Bid <= OrderOpenPrice() - StopLoss * gd_412 || (f0_10(OrderOpenPrice(), ld_124, ld_108, iOpen(NULL, PERIOD_M1,
							 1), iClose(NULL, PERIOD_M1, 1)) && TimeCurrent() - OrderOpenTime() > 180) || (FridayExit && DayOfWeek() == 5 && Hour() >= ExitHour && TimeCurrent() - OrderOpenTime() > 180)) {
							 for (int li_176 = 1; li_176 <= MathMax(1, gi_100); li_176++) {
								RefreshRates();
								if (OrderClose(OrderTicket(), OrderLots(), NormalizeDouble(Bid, Digits), Slippage, Violet)) {
								   li_156--;
								   break;
								}
								Sleep(MathMax(100, 1000 * gi_104));
							 }
							 Sleep(5000);
							 continue;
						  }
						  if (!(Bid - OrderOpenPrice() > SecureProfitTriger * gd_412 && MathAbs(OrderOpenPrice() + SecureProfit * gd_412 - OrderStopLoss()) >= Point)) continue;
						  OrderModify(OrderTicket(), OrderOpenPrice(), NormalizeDouble(OrderOpenPrice() + SecureProfit * gd_412, Digits), OrderTakeProfit(), 0, Blue);
						  continue;
					   }
					   li_160++;
					   if (OrderStopLoss() == 0.0 && StealthMode == FALSE) {
						  ld_184 = NormalizeDouble(OrderOpenPrice() + StopLoss * gd_412, Digits);
						  ld_192 = NormalizeDouble(OrderOpenPrice() - TakeProfit * gd_412, Digits);
						  OrderModify(OrderTicket(), OrderOpenPrice(), ld_184, ld_192, 0, Green);
						  continue;
					   }
					   if (Ask <= OrderOpenPrice() - TakeProfit * gd_412 || Ask >= OrderOpenPrice() + StopLoss * gd_412 || (f0_11(OrderOpenPrice(), ld_124, ld_108, iOpen(NULL, PERIOD_M1,
						  1), iClose(NULL, PERIOD_M1, 1)) && TimeCurrent() - OrderOpenTime() > 180) || (FridayExit && DayOfWeek() == 5 && Hour() >= ExitHour && TimeCurrent() - OrderOpenTime() > 180)) {
						  for (li_176 = 1; li_176 <= MathMax(1, gi_100); li_176++) {
							 RefreshRates();
							 if (OrderClose(OrderTicket(), OrderLots(), NormalizeDouble(Ask, Digits), Slippage, Violet)) {
								li_160--;
								break;
							 }
							 Sleep(MathMax(100, 1000 * gi_104));
						  }
						  Sleep(5000);
						  continue;
					   }
					   if (OrderOpenPrice() - Ask > SecureProfitTriger * gd_412 && MathAbs(OrderOpenPrice() - SecureProfit * gd_412 - OrderStopLoss()) >= Point) OrderModify(OrderTicket(), OrderOpenPrice(), NormalizeDouble(OrderOpenPrice() - SecureProfit * gd_412, Digits), OrderTakeProfit(), 0, Red);
					}
				 }
			  }
		   }
		   ls_0 = ls_0 
		   + "\n  Account Ballance = " + DoubleToStr(AccountBalance(), 2);
		   if (li_156 == 0 && li_160 == 0) {
			  ls_0 = ls_0 
				 + "\n  No active trades" 
			  + "\n";
		   } else {
			  ls_0 = ls_0 
				 + "\n  Current trade " + DoubleToStr(ld_56, 1) 
			  + "\n  Account Profit = " + DoubleToStr(ld_64, 2);
		   }
		   Comment(ls_0);
		   bool li_200 = TRUE;
		   bool li_204 = TRUE;
		   if (NFA == TRUE && li_160 > 0 || li_156 > 0) {
			  li_200 = FALSE;
			  li_204 = FALSE;
		   }
		   if (NFA == TRUE && li_168 > 0 || li_164 > 0) {
			  li_200 = FALSE;
			  li_204 = FALSE;
		   }
		   if (No_Hedge == TRUE && li_160 > 0 || li_168 > 0) li_200 = FALSE;
		   if (No_Hedge == TRUE && li_156 > 0 || li_164 > 0) li_204 = FALSE;
		   if (!gi_112) gi_336 = 1000;
		   else gi_336 = gi_336;
		   if (ld_132 <= gi_328 * gd_412) return (0);
		   if (OrdersTotal() >= MaxAccountTrades && MaxAccountTrades > 0) return (0);
		   if (DayOfWeek() == 1 && Hour() < MondayStartHour) return (0);
		   if (FridayExit && DayOfWeek() == 5 && Hour() > MathMin(LastTradeHour, ExitHour - 1)) return (0);
		   int li_36 = -1;
		   if (li_156 < 1 && f0_9(ld_108, ld_116, ld_124, ld_140)) {
			  if (Ask - Bid > MaxSpread * gd_412) {
				 Print("BUY not taken!!! - High spead...");
				 Sleep(1000);
			  } else {
				 if (!li_200) {
					Print("BUY not taken!!! - No Hedge, or FIFO restriction ...");
					Sleep(1000);
				 } else {
					ls_208 = "BUY";
					li_36 = 0;
					li_32 = Aqua;
					RefreshRates();
					ld_8 = NormalizeDouble(Ask, Digits);
					ld_16 = ld_8 - StopLoss * gd_412;
					ld_24 = ld_8 + TakeProfit * gd_412;
				 }
			  }
		   }
		   if (li_160 < 1 && f0_4(ld_108, ld_116, ld_124, ld_140)) {
			  if (Ask - Bid > MaxSpread * gd_412) {
				 Print("SELL not taken!!! - High spead...");
				 Sleep(1000);
			  } else {
				 if (!li_204) {
					Print("SELL not taken!!! - No Hedge, or FIFO restriction ...");
					Sleep(1000);
				 } else {
					ls_208 = "SELL";
					li_36 = 1;
					li_32 = Red;
					RefreshRates();
					ld_8 = NormalizeDouble(Bid, Digits);
					ld_16 = ld_8 + StopLoss * gd_412;
					ld_24 = ld_8 - TakeProfit * gd_412;
				 }
			  }
		   }
		   if (li_36 >= OP_BUY && f0_3() && f0_6()) {
			  for (li_176 = 1; li_176 <= MathMax(1, gi_100); li_176++) {
				 li_172 = OrderSend(Symbol(), li_36, ld_40, ld_8, Slippage, 0, 0, EA_Comment, Magic, 0, li_32);
				 if (li_172 >= 0) break;
				 Sleep(MathMax(100, 1000 * gi_104));
				 RefreshRates();
				 if (li_36 == OP_BUY) ld_8 = NormalizeDouble(Ask, Digits);
				 else
					if (li_36 == OP_SELL) ld_8 = NormalizeDouble(Bid, Digits);
			  }
			  Sleep(5000);
			  if (li_172 > 0) {
				 if (OrderSelect(li_172, SELECT_BY_TICKET, MODE_TRADES)) Print("Order " + ls_208 + " opened!: ", OrderOpenPrice());
			  } else Print("Error opening " + ls_208 + " order!: ", GetLastError());
		   } else {
			  if (li_36 >= OP_BUY && f0_3() && gi_448 != iTime(NULL, PERIOD_M15, 1)) {
				 gi_448 = iTime(NULL, PERIOD_M15, 1);
				 if (li_36 == OP_BUY) Print("BUY skipped: " + gs_436);
				 else Print("SELL skipped: " + gs_436);
			  }
		   }
   
   }
   return (0);
}

double f0_1() {
   double ld_16;
   int li_24;
   double ld_28;
   int li_36;
   double ld_40;
   int li_48;
   double ld_52;
   int li_60;
   double ld_8 = 1;
   if (gd_272 > 0.0 && AutoMM > 0.0) {
      ld_16 = 0;
      li_24 = 0;
      ld_28 = 0;
      li_36 = 0;
      ld_40 = 0;
      li_48 = 0;
      for (int li_64 = OrdersHistoryTotal() - 1; li_64 >= 0; li_64--) {
         if (OrderSelect(li_64, SELECT_BY_POS, MODE_HISTORY)) {
            if (OrderSymbol() == Symbol() && OrderMagicNumber() == Magic) {
               li_24++;
               ld_16 += OrderProfit();
               if (ld_16 > ld_40) {
                  ld_40 = ld_16;
                  li_48 = li_24;
               }
               if (ld_16 < ld_28) {
                  ld_28 = ld_16;
                  li_36 = li_24;
               }
               if (li_24 >= gi_260) break;
            }
         }
      }
      if (li_48 <= li_36) ld_8 = MathPow(gd_272, li_36);
      else {
         ld_16 = ld_40;
         li_24 = li_48;
         ld_52 = ld_40;
         li_60 = li_48;
         for (li_64 = OrdersHistoryTotal() - li_48 - 1; li_64 >= 0; li_64--) {
            if (OrderSelect(li_64, SELECT_BY_POS, MODE_HISTORY)) {
               if (OrderSymbol() == Symbol() && OrderMagicNumber() == Magic) {
                  if (li_24 >= gi_260) break;
                  li_24++;
                  ld_16 += OrderProfit();
                  if (ld_16 < ld_52) {
                     ld_52 = ld_16;
                     li_60 = li_24;
                  }
               }
            }
         }
         if (li_60 == li_48 || ld_52 == ld_40) ld_8 = MathPow(gd_272, li_36);
         else {
            if (MathAbs(ld_28 - ld_40) / MathAbs(ld_52 - ld_40) >= (gd_264 + 100.0) / 100.0) ld_8 = MathPow(gd_272, li_36);
            else ld_8 = MathPow(gd_272, li_60);
         }
      }
   }
   for (double ld_0 = MathMax(gd_376, MathMin(gd_384, MathCeil(MathMin(AutoMM_Max, ld_8 * AutoMM) / 100.0 * AccountFreeMargin() / gd_392 / (gi_400 / 100)) * gd_392)); ld_0 >= 2.0 * gd_376 &&
      1.05 * (ld_0 * gd_404) >= AccountFreeMargin(); ld_0 -= gd_376) {
   }
   return (ld_0);
}

int f0_3() {
   int li_4;
   bool li_0 = TRUE;
   if (gi_344 > 0 && gi_348 > 0) {
      li_4 = 0;
      for (int li_8 = OrdersHistoryTotal() - 1; li_8 >= 0; li_8--) {
         if (OrderSelect(li_8, SELECT_BY_POS, MODE_HISTORY)) {
            if (OrderSymbol() == Symbol() && OrderMagicNumber() == Magic) {
               if (!((OrderType() == OP_BUY && (OrderClosePrice() - OrderOpenPrice()) / gd_412 <= (-gi_344)) || (OrderType() == OP_SELL && (OrderOpenPrice() - OrderClosePrice()) / gd_412 <= (-gi_344)))) break;
               li_4 = OrderCloseTime();
               break;
            }
         }
      }
      if (TimeCurrent() - li_4 < 3600 * gi_348) li_0 = FALSE;
   }
   return (li_0);
}

int f0_8() {
   int li_0 = GMT_Offset;
   if (DST_Usage && Month() > Month() & 3 < 11) li_0++;
   return (li_0);
}

void f0_2() {
   int li_0;
   int li_8;
   int li_12;
   string ls_16;
   string ls_24;
   bool li_32;
   string ls_44;
   string ls_52;
   string ls_60;
   string ls_68;
   string ls_76;
   string ls_84;
   string ls_92;
   int li_100;
   string ls_104;
   string ls_112;
   string ls_120;
   bool li_128;
   int li_132;
   int li_136;
   int li_140;
   int li_144;
   string ls_152;
   int li_160;
   gs_428 = "";
   if (!Avoid_News) {
      gs_428 = "News Filter - OFF";
      return;
   }
   gs_428 = "News Filter - No Important News";
   if (MathAbs(TimeCurrent() - gi_444) >= 86400.0 || TimeDay(TimeCurrent()) != TimeDay(gi_444)) {
      ls_104 = "Wallstreet_Current_News.csv";
      ls_112 = "http://www.wallstreet-forex.com/calendar.php?all=0";
      gi_444 = TimeCurrent();
      if (IsTesting()) {
         ls_104 = "Wallstreet_History_News.csv";
         ls_112 = "http://www.wallstreet-forex.com/calendar.php?all=1";
      }
      ls_112 = ls_112 + "&AccountId=" + DoubleToStr(AccountNumber(), 0) + "&AccountType=";
      if (IsDemo()) ls_112 = ls_112 + "1";
      else ls_112 = ls_112 + "2";
      li_32 = TRUE;
      for (int li_4 = 1; li_4 <= 3; li_4++) {
         li_0 = FileOpen(ls_104, FILE_CSV|FILE_READ, ';');
         if (li_0 >= 0) break;
         Sleep(1000);
      }
      if (li_0 >= 0) {
         while (!FileIsEnding(li_0)) {
            for (string ls_36 = FileReadString(li_0); !FileIsEnding(li_0); ls_36 = FileReadString(li_0))
               if (StringLen(ls_36) == 10 && StringFind(ls_36, ".") == 4) break;
            ls_44 = FileReadString(li_0);
            if (StringLen(ls_44) != 5 || StringFind(ls_44, ":") != 2) continue;
            ls_52 = FileReadString(li_0);
            ls_60 = FileReadString(li_0);
            ls_68 = FileReadString(li_0);
            ls_76 = FileReadString(li_0);
            ls_84 = FileReadString(li_0);
            ls_92 = FileReadString(li_0);
            if (StringLen(ls_36) > 0 && StringLen(ls_44) > 0) {
               li_100 = StrToTime(ls_36 + " " + ls_44) + 3600 * f0_8();
               if ((IsTesting() && li_100 >= TimeCurrent() - 86400) || (!IsTesting() && li_100 >= TimeCurrent() + 86400) || (!IsTesting() && Day() >= 5 && li_100 - 3600 * f0_8() > iTime(NULL,
                  PERIOD_D1, 0))) {
                  li_32 = FALSE;
                  break;
               }
            }
         }
         FileClose(li_0);
         if (li_32) FileDelete(ls_104);
      }
      if (li_32) {
         li_12 = 0;
         for (li_4 = 1; li_4 <= 3; li_4++) {
            li_0 = FileOpen(ls_104, FILE_CSV|FILE_WRITE, ';');
            if (li_0 >= 0) break;
            Sleep(1000);
         }
         if (li_0 >= 0) {
            ls_120 = "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; Q312461)";
            li_128 = FALSE;
            li_144 = 120;
            int lia_148[] = {1};
            ls_152 = "                                                                                                                                                                                                                                                           ";
            ls_16 = "";
            for (li_4 = 1; li_4 <= 3; li_4++) {
               li_132 = InternetOpenA(ls_120, li_128, "0", "0", 0);
               if (li_132 != 0) break;
               Sleep(1000);
            }
            if (li_132 != 0) {
               for (li_4 = 1; li_4 <= 3; li_4++) {
                  li_136 = InternetOpenUrlA(li_132, ls_112, "0", 0, -2080374528, 0);
                  if (li_136 != 0) break;
                  Sleep(1000);
               }
               if (li_136 != 0) {
                  li_140 = InternetReadFile(li_136, ls_152, li_144, lia_148);
                  if (li_140 != 0) {
                     ls_16 = StringSubstr(ls_152, 0, lia_148[0]);
                     while (lia_148[0] != 0) {
                        li_140 = InternetReadFile(li_136, ls_152, li_144, lia_148);
                        if (lia_148[0] == 0) break;
                        ls_16 = ls_16 + StringSubstr(ls_152, 0, lia_148[0]);
                        li_12 += lia_148[0];
                        while (true) {
                           li_8 = -1;
                           for (li_4 = 0; li_4 < StringLen(ls_16); li_4++) {
                              li_160 = StringGetChar(ls_16, li_4);
                              if (li_160 == 10 || li_160 == 13) {
                                 li_8 = li_4;
                                 break;
                              }
                           }
                           if (li_8 < 0) break;
                           if (li_8 > 0) {
                              ls_24 = StringSubstr(ls_16, 0, li_8);
                              FileWrite(li_0, ls_24);
                           }
                           ls_16 = StringSubstr(ls_16, li_8 + 1);
                        }
                     }
                     if (StringLen(ls_16) > 0) FileWrite(li_0, ls_16);
                     ls_16 = "";
                  }
                  InternetCloseHandle(li_136);
               }
               InternetCloseHandle(li_132);
            }
            FileClose(li_0);
         }
         if (li_12 <= 10) {
            Alert("Can\'t download " + ls_104 + ". News Filter was turned OFF");
            if (IsTesting()) Print("Can\'t download " + ls_104 + ". News Filter was turned OFF");
            Sleep(5000);
         } else Print("Downloaded " + DoubleToStr(li_12, 0) + " bytes (" + ls_104 + ")");
      }
      gi_460 = 0;
      for (li_4 = 1; li_4 <= 3; li_4++) {
         li_0 = FileOpen(ls_104, FILE_CSV|FILE_READ, ';');
         if (li_0 >= 0) break;
         Sleep(1000);
      }
      if (li_0 < 0) {
         Alert("Can\'t open " + ls_104 + ". Error code: ", GetLastError());
         if (IsTesting()) Print("Can\'t open " + ls_104 + ". Error code: ", GetLastError());
         Sleep(5000);
      } else {
         while (!FileIsEnding(li_0)) {
            for (ls_36 = FileReadString(li_0); !FileIsEnding(li_0); ls_36 = FileReadString(li_0))
               if (StringLen(ls_36) == 10 && StringFind(ls_36, ".") == 4) break;
            ls_44 = FileReadString(li_0);
            if (StringLen(ls_44) != 5 || StringFind(ls_44, ":") != 2) continue;
            ls_52 = FileReadString(li_0);
            ls_60 = FileReadString(li_0);
            ls_68 = FileReadString(li_0);
            ls_76 = FileReadString(li_0);
            ls_84 = FileReadString(li_0);
            ls_92 = FileReadString(li_0);
            if (StringLen(ls_36) > 0 && StringLen(ls_44) > 0) {
               li_100 = StrToTime(ls_36 + " " + ls_44) + 3600 * f0_8();
               if (li_100 >= TimeCurrent() - 86400 && li_100 <= TimeCurrent() + 86400 && StringFind(Symbol(), ls_52) >= 0 && ls_68 == "3" || (ls_68 == "2" && Include_Medium_News)) {
                  gi_460++;
                  gia_464[gi_460] = li_100;
                  gsa_468[gi_460] = ls_52;
                  gsa_472[gi_460] = ls_60;
               }
            }
         }
         FileClose(li_0);
      }
   }
   for (li_4 = 1; li_4 <= gi_460; li_4++) {
      if (gia_464[li_4] >= TimeCurrent() && gia_464[li_4] <= TimeCurrent() + 86400 && TimeDay(gia_464[li_4]) == TimeDay(TimeCurrent())) {
         gs_428 = TimeToStr(gia_464[li_4], TIME_MINUTES) + " " + gsa_468[li_4] + " News - " + gsa_472[li_4];
         break;
      }
   }
   if (StringLen(gs_428) > 33) gs_428 = StringSubstr(gs_428, 0, 30) + "...";
}

int f0_6() {
   bool li_0 = TRUE;
   if (Avoid_News) {
      gs_436 = "";
      for (int li_4 = 1; li_4 <= gi_460; li_4++) {
         if ((gia_464[li_4] < TimeCurrent() && gia_464[li_4] + 60 * Wait_After_News >= TimeCurrent()) || (gia_464[li_4] >= TimeCurrent() && gia_464[li_4] - 60 * Wait_Before_News <= TimeCurrent())) {
            gs_436 = TimeToStr(gia_464[li_4], TIME_MINUTES) + " " + gsa_468[li_4] + " News - " + gsa_472[li_4];
            li_0 = FALSE;
            break;
         }
      }
   }
   return (li_0);
}

int f0_5() {
   if (UseCustomPair) gs_356 = StringSubstr(UseSettingsFrom, 0, 6);
   else gs_356 = StringSubstr(Symbol(), 0, 6);
   int li_0 = SessionInit(AccountNumber(), IsTesting(), IsDemo(), WindowHandle(Symbol(), Period()), gs_356);
   if (li_0 == -8 && StringFind(",EURUSD,GBPUSD,USDCHF,USDJPY,USDCAD,", "," + gs_356 + ",") >= 0) {
      Comment("\nUpdating settings (" + gs_356 + ")...");
      li_0 = SessionDeinit(AccountNumber(), IsTesting(), IsDemo(), WindowHandle(Symbol(), Period()), gs_356);
      Sleep(3000);
      li_0 = SessionInit(AccountNumber(), IsTesting(), IsDemo(), WindowHandle(Symbol(), Period()), gs_356);
   }
   if (li_0 >= 0) {
      gi_280 = ParamValue(li_0, 1);
      gi_284 = ParamValue(li_0, 2);
      gi_288 = ParamValue(li_0, 3);
      gi_292 = ParamValue(li_0, 4);
      gi_296 = ParamValue(li_0, 5);
      gi_300 = ParamValue(li_0, 6);
      gi_304 = ParamValue(li_0, 7);
      gi_308 = ParamValue(li_0, 8);
      gi_312 = ParamValue(li_0, 9);
      if (SecureProfit <= 0) SecureProfit = ParamValue(li_0, 10);
      if (SecureProfitTriger <= 0) SecureProfitTriger = ParamValue(li_0, 11);
      gi_316 = ParamValue(li_0, 12);
      gi_320 = ParamValue(li_0, 13);
      gi_324 = ParamValue(li_0, 14);
      gi_328 = ParamValue(li_0, 15);
      gi_332 = ParamValue(li_0, 16);
      gi_336 = ParamValue(li_0, 17);
      gi_340 = ParamValue(li_0, 18);
      gi_344 = ParamValue(li_0, 19);
      gi_348 = ParamValue(li_0, 20);
      if (StopLoss <= 0) StopLoss = ParamValue(li_0, 21);
      if (TakeProfit <= 0) TakeProfit = ParamValue(li_0, 22);
   }
   return (li_0);
}

int f0_7() {
   int li_0;
   if (UseCustomPair) li_0 = SessionDeinit(AccountNumber(), IsTesting(), IsDemo(), WindowHandle(Symbol(), Period()), StringSubstr(UseSettingsFrom, 0, 6));
   else li_0 = SessionDeinit(AccountNumber(), IsTesting(), IsDemo(), WindowHandle(Symbol(), Period()), StringSubstr(Symbol(), 0, 6));
   return (li_0);
}

int f0_10(double ad_0, double ad_8, double ad_16, double ad_24, double ad_32) {
   bool li_40 = FALSE;
   li_40 = CheckCloseLong(gi_352, ad_0, ad_8, ad_16, ad_24, ad_32, gi_304, Bid, Ask, gd_412);
   return (li_40);
}

int f0_11(double ad_0, double ad_8, double ad_16, double ad_24, double ad_32) {
   bool li_40 = FALSE;
   li_40 = CheckCloseShort(gi_352, ad_0, ad_8, ad_16, ad_24, ad_32, gi_304, Bid, Ask, gd_412);
   return (li_40);
}

int f0_9(double ad_0, double ad_8, double ad_16, double ad_24) {
   bool li_32 = FALSE;
   li_32 = CheckOpenLong(gi_352, ad_0, ad_8, ad_16, ad_24, gi_336, Bid, Ask, gd_412);
   return (li_32);
}

int f0_4(double ad_0, double ad_8, double ad_16, double ad_24) {
   bool li_32 = FALSE;
   li_32 = CheckOpenShort(gi_352, ad_0, ad_8, ad_16, ad_24, gi_336, Bid, Ask, gd_412);
   return (li_32);
}